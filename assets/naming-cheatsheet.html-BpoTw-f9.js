import{_ as n,c as a,a as e,o as t}from"./app-CKexX01n.js";const p={};function i(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="naming-cheatsheet" tabindex="-1"><a class="header-anchor" href="#naming-cheatsheet"><span>Naming cheatsheet</span></a></h1><ul><li><a href="#naming-cheatsheet">Naming cheatsheet</a><ul><li><a href="#english-language">English language</a></li><li><a href="#naming-convention">Naming convention</a></li><li><a href="#s-i-d">S-I-D</a></li><li><a href="#avoid-contractions">Avoid contractions</a></li><li><a href="#avoid-context-duplication">Avoid context duplication</a></li><li><a href="#reflect-the-expected-result">Reflect the expected result</a></li></ul></li><li><a href="#naming-functions">Naming functions</a><ul><li><a href="#ahclc-pattern">A/HC/LC Pattern</a></li><li><a href="#actions">Actions</a><ul><li><a href="#get"><code>get</code></a></li><li><a href="#set"><code>set</code></a></li><li><a href="#reset"><code>reset</code></a></li><li><a href="#fetch"><code>fetch</code></a></li><li><a href="#remove"><code>remove</code></a></li><li><a href="#delete"><code>delete</code></a></li><li><a href="#compose"><code>compose</code></a></li></ul></li><li><a href="#context">Context</a></li><li><a href="#prefixes">Prefixes</a><ul><li><a href="#is"><code>is</code></a></li><li><a href="#has"><code>has</code></a></li><li><a href="#should"><code>should</code></a></li><li><a href="#minmax"><code>min</code>/<code>max</code></a></li></ul></li><li><a href="#singular-and-plurals">Singular and Plurals</a></li></ul></li></ul><hr><p>Naming things is hard. This sheet attempts to make it easier.</p><p>Although these suggestions can be applied to any programming language, I will use JavaScript to illustrate them in practice.</p><h2 id="english-language" tabindex="-1"><a class="header-anchor" href="#english-language"><span>English language</span></a></h2><p>Use English language when naming your variables and functions.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">/* Bad */</span></span>
<span class="line"><span class="token keyword">const</span> primerNombre <span class="token operator">=</span> <span class="token string">&#39;Gustavo&#39;</span></span>
<span class="line"><span class="token keyword">const</span> amigos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Kate&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Good */</span></span>
<span class="line"><span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token string">&#39;Gustavo&#39;</span></span>
<span class="line"><span class="token keyword">const</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Kate&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Like it or not, English is the dominant language in programming: the syntax of all programming languages is written in English, as well as countless documentations and educational materials. By writing your code in English you dramatically increase its cohesiveness.</p></blockquote><h2 id="naming-convention" tabindex="-1"><a class="header-anchor" href="#naming-convention"><span>Naming convention</span></a></h2><p>Pick <strong>camelCase</strong> naming convention and follow it.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">/* Bad */</span></span>
<span class="line"><span class="token keyword">const</span> page_count <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"><span class="token keyword">const</span> active <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token keyword">const</span> ShouldUpdate <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Good */</span></span>
<span class="line"><span class="token keyword">const</span> pageCount <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"><span class="token keyword">const</span> isActive <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token keyword">const</span> shouldUpdate <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="s-i-d" tabindex="-1"><a class="header-anchor" href="#s-i-d"><span>S-I-D</span></a></h2><p>A name must be <em>short</em>, <em>intuitive</em> and <em>descriptive</em>:</p><ul><li><strong>Short</strong>. A name must not take long to type and, therefore, remember;</li><li><strong>Intuitive</strong>. A name must read naturally, as close to the common speech as possible;</li><li><strong>Descriptive</strong>. A name must reflect what it does/possesses in the most efficient way.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">/* Bad */</span></span>
<span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">// &quot;a&quot; could mean anything</span></span>
<span class="line"><span class="token keyword">const</span> isPaginatable <span class="token operator">=</span> a <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token comment">// &quot;Paginatable&quot; sounds extremely unnatural</span></span>
<span class="line"><span class="token keyword">const</span> shouldPaginatize <span class="token operator">=</span> a <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token comment">// Made up verbs are so much fun!</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Good */</span></span>
<span class="line"><span class="token keyword">const</span> postCount <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"><span class="token keyword">const</span> hasPagination <span class="token operator">=</span> postCount <span class="token operator">&gt;</span> <span class="token number">10</span></span>
<span class="line"><span class="token keyword">const</span> shouldPaginate <span class="token operator">=</span> postCount <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token comment">// alternatively</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="avoid-contractions" tabindex="-1"><a class="header-anchor" href="#avoid-contractions"><span>Avoid contractions</span></a></h2><p>Do <strong>not</strong> use contractions. They contribute to nothing but decreased readability of the code. Finding a short, descriptive name may be hard, but contraction is not an excuse for not doing so.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">/* Bad */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getUsrNme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Good */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="avoid-context-duplication" tabindex="-1"><a class="header-anchor" href="#avoid-context-duplication"><span>Avoid context duplication</span></a></h2><p>A name should not duplicate the context in which it is defined. Always remove the context from a name if that doesn&#39;t decrease its readability.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* Method name duplicates the context (which is &quot;User&quot;) */</span></span>
<span class="line">  <span class="token function">getUserSettings</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* Reads nicely as \`userService.getSettings()\` */</span></span>
<span class="line">  <span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reflect-the-expected-result" tabindex="-1"><a class="header-anchor" href="#reflect-the-expected-result"><span>Reflect the expected result</span></a></h2><p>A name should reflect the expected result.</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token comment">/* Bad */</span></span>
<span class="line"><span class="token keyword">const</span> isEnabled <span class="token operator">=</span> itemCount <span class="token operator">&gt;</span> <span class="token number">3</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Good */</span></span>
<span class="line"><span class="token keyword">const</span> isDisabled <span class="token operator">=</span> itemCount <span class="token operator">&lt;=</span> <span class="token number">3</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>isDisabled<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="naming-functions" tabindex="-1"><a class="header-anchor" href="#naming-functions"><span>Naming functions</span></a></h1><h2 id="a-hc-lc-pattern" tabindex="-1"><a class="header-anchor" href="#a-hc-lc-pattern"><span>A/HC/LC Pattern</span></a></h2><p>There is a useful pattern to follow when naming functions:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">prefix? + action (A) + high context (HC) + low context? (LC)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Take a look at how this pattern may be applied in the table below.</p><table><thead><tr><th>Name</th><th>Prefix</th><th>Action (A)</th><th>High context (HC)</th><th>Low context (LC)</th></tr></thead><tbody><tr><td><code>getUser</code></td><td></td><td><code>get</code></td><td><code>User</code></td><td></td></tr><tr><td><code>getUserMessages</code></td><td></td><td><code>get</code></td><td><code>User</code></td><td><code>Messages</code></td></tr><tr><td><code>shouldDisplayMessage</code></td><td><code>should</code></td><td><code>Display</code></td><td><code>Message</code></td><td></td></tr><tr><td><code>isPaymentEnabled</code></td><td><code>is</code></td><td><code>Enabled</code></td><td><code>Payment</code></td><td></td></tr></tbody></table><hr><h2 id="actions" tabindex="-1"><a class="header-anchor" href="#actions"><span>Actions</span></a></h2><p>The verb part of your function name. The most important part responsible for describing what the function <em>does</em>.</p><h3 id="get" tabindex="-1"><a class="header-anchor" href="#get"><span><code>get</code></span></a></h3><p>Accesses data immediately (i.e. shorthand getter of internal data).</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">getUserFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>See also <a href="#compose">compose</a>.</p></blockquote><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span><code>set</code></span></a></h3><p>Sets a variable in a declarative way, with value <code>A</code> to value <code>B</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">setFruits</span><span class="token punctuation">(</span><span class="token parameter">nextFruits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  fruits <span class="token operator">=</span> nextFruits<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setFruits</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reset" tabindex="-1"><a class="header-anchor" href="#reset"><span><code>reset</code></span></a></h3><p>Sets a variable back to its initial value or state.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> initialFruits <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"><span class="token keyword">let</span> fruits <span class="token operator">=</span> initialFruits</span>
<span class="line"><span class="token function">setFruits</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span> <span class="token comment">// 10</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">resetFruits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  fruits <span class="token operator">=</span> initialFruits</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">resetFruits</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span> <span class="token comment">// 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch"><span><code>fetch</code></span></a></h3><p>Request for some data, which takes some indeterminate time (i.e. database request).</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userRepository<span class="token punctuation">.</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&#39;user.isActive = :isActive&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">isActive</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">getMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="remove" tabindex="-1"><a class="header-anchor" href="#remove"><span><code>remove</code></span></a></h3><p>Removes something <em>from</em> somewhere.</p><p>For example, if you have a collection of selected filters on a search page, removing one of them from the collection is <code>removeFilter</code>, <strong>not</strong> <code>deleteFilter</code> (and this is how you would naturally say it in English as well):</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">removeFilter</span><span class="token punctuation">(</span><span class="token parameter">filters<span class="token punctuation">,</span> filterName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> filters<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> name <span class="token operator">!==</span> filterName<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> selectedFilters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;availability&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;size&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token function">removeFilter</span><span class="token punctuation">(</span>selectedFilters<span class="token punctuation">,</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>See also <a href="#delete">delete</a>.</p></blockquote><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span><code>delete</code></span></a></h3><p>Completely erases something from the realms of existence.</p><p>Imagine you are a content editor, and there is that notorious post you wish to get rid of. Once you clicked a shiny &quot;Delete post&quot; button, the CMS performed a <code>deletePost</code> action, <strong>not</strong> <code>removePost</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>See also <a href="#remove">remove</a>.</p></blockquote><h3 id="compose" tabindex="-1"><a class="header-anchor" href="#compose"><span><code>compose</code></span></a></h3><p>Creates new data from the existing one. Mostly applicable to strings, objects, or functions.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">composePageUrl</span><span class="token punctuation">(</span><span class="token parameter">pageName<span class="token punctuation">,</span> pageId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>pageName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> pageId<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>See also <a href="#get">get</a>.</p></blockquote><hr><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>Context</span></a></h2><p>A domain that a function operates on.</p><p>A function is often an action on <em>something</em>. It is important to state what its operable domain is, or at least an expected data type.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">/* A pure function operating with primitives */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> predicate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Function operating exactly on posts */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getRecentPosts</span><span class="token punctuation">(</span><span class="token parameter">posts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">filter</span><span class="token punctuation">(</span>posts<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> post<span class="token punctuation">.</span>date <span class="token operator">===</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Some language-specific assumptions may allow omitting the context. For example, in JavaScript, it&#39;s common that <code>filter</code> operates on Array. Adding explicit <code>filterArray</code> would be unnecessary.</p></blockquote><p>--</p><h2 id="prefixes" tabindex="-1"><a class="header-anchor" href="#prefixes"><span>Prefixes</span></a></h2><p>Prefix enhances the meaning of a variable. It is rarely used in function names.</p><h3 id="is" tabindex="-1"><a class="header-anchor" href="#is"><span><code>is</code></span></a></h3><p>Describes a characteristic or state of the current context (usually <code>boolean</code>).</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token string">&#39;blue&#39;</span></span>
<span class="line"><span class="token keyword">const</span> isBlue <span class="token operator">=</span> color <span class="token operator">===</span> <span class="token string">&#39;blue&#39;</span> <span class="token comment">// characteristic</span></span>
<span class="line"><span class="token keyword">const</span> isPresent <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// state</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>isBlue <span class="token operator">&amp;&amp;</span> isPresent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Blue is present!&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="has" tabindex="-1"><a class="header-anchor" href="#has"><span><code>has</code></span></a></h3><p>Describes whether the current context possesses a certain value or state (usually <code>boolean</code>).</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">/* Bad */</span></span>
<span class="line"><span class="token keyword">const</span> isProductsExist <span class="token operator">=</span> productsCount <span class="token operator">&gt;</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">const</span> areProductsPresent <span class="token operator">=</span> productsCount <span class="token operator">&gt;</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Good */</span></span>
<span class="line"><span class="token keyword">const</span> hasProducts <span class="token operator">=</span> productsCount <span class="token operator">&gt;</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="should" tabindex="-1"><a class="header-anchor" href="#should"><span><code>should</code></span></a></h3><p>Reflects a positive conditional statement (usually <code>boolean</code>) coupled with a certain action.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">shouldUpdateUrl</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> expectedUrl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> url <span class="token operator">!==</span> expectedUrl</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="min-max" tabindex="-1"><a class="header-anchor" href="#min-max"><span><code>min</code>/<code>max</code></span></a></h3><p>Represents a minimum or maximum value. Used when describing boundaries or limits.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * Renders a random amount of posts within</span>
<span class="line"> * the given min/max boundaries.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">renderPosts</span><span class="token punctuation">(</span><span class="token parameter">posts<span class="token punctuation">,</span> minPosts<span class="token punctuation">,</span> maxPosts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> posts<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">randomBetween</span><span class="token punctuation">(</span>minPosts<span class="token punctuation">,</span> maxPosts<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="singular-and-plurals" tabindex="-1"><a class="header-anchor" href="#singular-and-plurals"><span>Singular and Plurals</span></a></h2><p>Like a prefix, variable names can be made singular or plural depending on whether they hold a single value or multiple values.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">/* Bad */</span></span>
<span class="line"><span class="token keyword">const</span> friends <span class="token operator">=</span> <span class="token string">&#39;Bob&#39;</span></span>
<span class="line"><span class="token keyword">const</span> friend <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tony&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tanya&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Good */</span></span>
<span class="line"><span class="token keyword">const</span> friend <span class="token operator">=</span> <span class="token string">&#39;Bob&#39;</span></span>
<span class="line"><span class="token keyword">const</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tony&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tanya&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,86)]))}const c=n(p,[["render",i],["__file","naming-cheatsheet.html.vue"]]),r=JSON.parse('{"path":"/docs/naming-cheatsheet.html","title":"Naming cheatsheet","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"English language","slug":"english-language","link":"#english-language","children":[]},{"level":2,"title":"Naming convention","slug":"naming-convention","link":"#naming-convention","children":[]},{"level":2,"title":"S-I-D","slug":"s-i-d","link":"#s-i-d","children":[]},{"level":2,"title":"Avoid contractions","slug":"avoid-contractions","link":"#avoid-contractions","children":[]},{"level":2,"title":"Avoid context duplication","slug":"avoid-context-duplication","link":"#avoid-context-duplication","children":[]},{"level":2,"title":"Reflect the expected result","slug":"reflect-the-expected-result","link":"#reflect-the-expected-result","children":[]},{"level":2,"title":"A/HC/LC Pattern","slug":"a-hc-lc-pattern","link":"#a-hc-lc-pattern","children":[]},{"level":2,"title":"Actions","slug":"actions","link":"#actions","children":[{"level":3,"title":"get","slug":"get","link":"#get","children":[]},{"level":3,"title":"set","slug":"set","link":"#set","children":[]},{"level":3,"title":"reset","slug":"reset","link":"#reset","children":[]},{"level":3,"title":"fetch","slug":"fetch","link":"#fetch","children":[]},{"level":3,"title":"remove","slug":"remove","link":"#remove","children":[]},{"level":3,"title":"delete","slug":"delete","link":"#delete","children":[]},{"level":3,"title":"compose","slug":"compose","link":"#compose","children":[]}]},{"level":2,"title":"Context","slug":"context","link":"#context","children":[]},{"level":2,"title":"Prefixes","slug":"prefixes","link":"#prefixes","children":[{"level":3,"title":"is","slug":"is","link":"#is","children":[]},{"level":3,"title":"has","slug":"has","link":"#has","children":[]},{"level":3,"title":"should","slug":"should","link":"#should","children":[]},{"level":3,"title":"min/max","slug":"min-max","link":"#min-max","children":[]}]},{"level":2,"title":"Singular and Plurals","slug":"singular-and-plurals","link":"#singular-and-plurals","children":[]}],"git":{"updatedTime":1735747782000,"contributors":[{"name":"Narek","username":"Narek","email":"narek.hakobyan.07@gmail.com","commits":2,"url":"https://github.com/Narek"}]},"filePathRelative":"docs/naming-cheatsheet.md"}');export{c as comp,r as data};
