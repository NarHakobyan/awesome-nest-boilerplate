/**
 * Orval Configuration for NestJS Boilerplate
 * 
 * This configuration generates TypeScript API clients from your NestJS OpenAPI schema.
 * 
 * Usage:
 * 1. Start your NestJS server: npm run start:dev or npm run start:https
 * 2. Install Orval: npm install -g @orval/cli
 * 3. Generate client: orval --config orval.config.js
 * 
 * For more configuration options, see: https://orval.dev/
 */

const { defineConfig } = require('orval');

module.exports = defineConfig({
    // Main API configuration
    'nestjs-api': {
        input: {
            // Use HTTPS if available, fallback to HTTP
            target: process.env.USE_HTTPS === 'true'
                ? 'https://localhost:3443/documentation-json'
                : 'http://localhost:3000/documentation-json',

            // Override for different environments
            // target: 'https://api.yourapp.com/documentation-json', // Production
            // target: 'https://staging-api.yourapp.com/documentation-json', // Staging

            validation: false, // Set to true to validate OpenAPI spec
        },
        output: {
            // Main output configuration
            target: './src/api/generated.ts',

            // Schemas output (optional, for better organization)
            schemas: './src/api/schemas',

            // Client library to use
            client: 'axios', // Options: 'axios', 'angular', 'react-query', 'svelte-query', 'vue-query', 'fetch'

            // Output mode
            mode: 'split', // Options: 'single', 'split', 'tags'

            // Mock generation (useful for testing)
            mock: false, // Set to true to generate mock data

            // Override default naming
            override: {
                // Custom mutator for request/response handling
                mutator: {
                    path: './src/api/mutator.ts',
                    name: 'customInstance',
                },

                // Transform operation names
                operations: {
                    // Prefix all operation names
                    // prefix: 'Api',

                    // Transform operation IDs
                    // transform: ({ operationId }) => `${operationId}Operation`,
                },

                // Custom headers
                header: {
                    // Add custom header to generated files
                    comment: [
                        'Generated by Orval',
                        'Do not edit manually',
                        `Generated at: ${new Date().toISOString()}`,
                    ],
                },

                // Query options (for react-query, vue-query, etc.)
                query: {
                    useQuery: true,
                    useMutation: true,
                    // Custom query key
                    queryKey: (operation) => `['${operation.operationId}']`,
                },
            },
        },
    },

    // Alternative configuration for different modules
    'auth-api': {
        input: {
            target: process.env.USE_HTTPS === 'true'
                ? 'https://localhost:3443/documentation-json'
                : 'http://localhost:3000/documentation-json',

            // Filter only auth-related endpoints
            filters: {
                tags: ['auth'], // Only include operations tagged with 'auth'
            },
        },
        output: {
            target: './src/api/auth.ts',
            client: 'axios',
            mode: 'single',
        },
    },

    // User management API
    'users-api': {
        input: {
            target: process.env.USE_HTTPS === 'true'
                ? 'https://localhost:3443/documentation-json'
                : 'http://localhost:3000/documentation-json',

            filters: {
                tags: ['users'],
            },
        },
        output: {
            target: './src/api/users.ts',
            client: 'axios',
            mode: 'single',
        },
    },

    // React Query configuration (if using React)
    'nestjs-react-query': {
        input: {
            target: process.env.USE_HTTPS === 'true'
                ? 'https://localhost:3443/documentation-json'
                : 'http://localhost:3000/documentation-json',
        },
        output: {
            target: './src/api/react-query.ts',
            client: 'react-query',
            mode: 'split',
            override: {
                query: {
                    useQuery: true,
                    useMutation: true,
                    useInfiniteQuery: true,
                },
            },
        },
    },

    // Fetch client configuration (lightweight alternative)
    'nestjs-fetch': {
        input: {
            target: process.env.USE_HTTPS === 'true'
                ? 'https://localhost:3443/documentation-json'
                : 'http://localhost:3000/documentation-json',
        },
        output: {
            target: './src/api/fetch-client.ts',
            client: 'fetch',
            mode: 'single',
        },
    },
});

/**
 * Environment-specific configurations
 * 
 * You can also create separate config files:
 * - orval.config.dev.js
 * - orval.config.staging.js
 * - orval.config.prod.js
 * 
 * And use them with: orval --config orval.config.dev.js
 */
